CREATE QUERY SimilarCustomers(VERTEX<Contact> sourceCustomer, set<string> campaignTypes, INT topK) FOR GRAPH MyGraph {
/*
  This query calculates the Jaccard Similarity between a given customer (of type Contact) and
  every other customers (or Contacts) who share similar campaigns (of type Campaign).
	The topK "similar" customers are printed out.
	
	SAMPLE INPUT:
	    Contact: Sam-Eisenberg
	    campaignTypes:
		          Webinar
							Demo Signup / Trial
		  topK: 5
	
  A Jaccard Similarity score is calculated for each similar customer (who share similar Campaigns 
	                  with the input sourceCustomer)
  The set of similar customers is sorted with the topK # customers printed out.
	
  Jaccard similarity = intersection_size / (size_A + size_B - intersection_size)
	
	More info:
	  How to find Jaccard similarity?
	      https://www.youtube.com/watch?v=5RRyzjvC5z4
	  Similarity Algorithms in GSQL
	      https://github.com/tigergraph/gsql-graph-algorithms/tree/master/algorithms/examples/Similarity
*/
        SumAccum<INT> @intersection_size, @@set_size_A, @set_size_B;
        SumAccum<FLOAT> @similarity;

        A(ANY) = {sourceCustomer};

        A = SELECT s
        	  FROM A:s
            ACCUM @@set_size_A += s.outdegree("is_connected_to");

        // From A set (Contact), traverse 'is_connected_to' edges to all CampaignMember s
        CampaignMembersSet = SELECT t
            FROM A:s -(is_connected_to:e)-> CampaignMember:t;

	      // From CampaignMember s, traverse 'is_part_of' edges to Campaign s, for all 
	      // desired campaignTypes (eg. Webinar, Website Direct, Demo Signup/Trial)
        CampaignSet = SELECT t
            FROM CampaignMembersSet -(is_part_of:e)-> Campaign:t
	          WHERE campaignTypes.size() == 0 OR (t.Campaign_Type in campaignTypes);

	      // From Campaign s, traverse 'reverse_is_part_of' edges back to all CampaignMember s
        CampaignMembersSet = SELECT t
            FROM CampaignSet:s -(reverse_is_part_of:e)-> CampaignMember:t;

	      // From CampaignMember s, traverse 'reverse_is_connected_to' edges back to Contacts (B set)
	      // For each Contact in B set, accumulate the intersection size of the shared Campaigns, and 
	      //   compute it's Jaccard Similarity score as
	      //     Jaccard similarity = intersection_size / size of the Union of (A set + B set)
	      //                        = intersection_size / (size_A + size_B - intersection_size)
        B = SELECT t
            FROM CampaignMembersSet:s -(reverse_is_connected_to:e)-> Contact:t
            WHERE t != sourceCustomer
            ACCUM t.@intersection_size += 1,
                       t.@set_size_B = t.outdegree("is_connected_to")
            POST-ACCUM t.@similarity = t.@intersection_size*1.0/
	                                    (@@set_size_A + t.@set_size_B - t.@intersection_size)
            ORDER BY t.@similarity DESC
            LIMIT topK;

        //PRINT B;
	      PRINT B[B.FirstName, B.LastName, B.@similarity];
}